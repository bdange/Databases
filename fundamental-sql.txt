Exercises

1. List the commands for: 
	- adding: INSERT INTO 
	- updating: UPDATE
	- deleting data: DELETE


2. Explain the structure for each type of command: 

The first step is CREATE TABLE with a (table name). This will instruct Postgres to create a table in the db. The number of columns will be set by naming them line by line inside parentheses. 

The next step is INSERT INTO (named columns) VALUE. As our table is now created named with defined columns, your can now enter the columns' values between parentheses for each line. 
This will add lines on our database and fill its columns. 

Now that this is set, you can modify the values by using the UPDATE command. We will need to use the SET command to specify what values to enter and WHERE to specify its location. 
Additionally we can use AND command if we need more precision in our request. 

We can also use DELETE FROM (table name) to delete some datas. We'll have to precise WHERE. AND is optional. 

Finally, we can also use ALTER TABLE in order to modify a table's schema. We can for instance ADD COLUMN, DROP COLUMN or even DROP TABLE. 


3. What are some of the data types that can be used in tables? Give a real-world example of each type.

You can use a company's employees list. Each employee would be registered with its own ID number, name, service and office location. 


4. Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

- Which data type would you use to store each of the following pieces of information?
- - First and last name: varchar
- - Whether they sent in their RSVP: bit
- - Number of guests: tinyint
- - Number of meals: tinyint if it's numerical or varchar if it also includes description. 


- Write a command that creates the table to track the wedding dinner.

CREATE TABLE dinner (
	name varchar, 
	reservation bit, 
	guest tinyint, 
	meals tinyint, 
);


- Write a command that adds a column to track whether the guest sent a thank you card.

ALTER TABLE dinner ADD COLUMN received bit;


- You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.

ALTER TABLE dinner DROP COLUMN meals; 


- The guests will need a place to sit at the reception, so write a command that adds a column for table number.

ALTER TABLE dinner ADD COLUMN table tinyint; 


- The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.

DROP TABLE dinner; 


5. Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.

CREATE TABLE library (
	ISBN char, 
	title varchar, 
	author varchar, 
	genre varchar, 
	publishing varchar,
	ncopies tinyint, 
	availcopies tinyint, 
)


- Find three books and add their information to the table.

INSERT INTO library (ISBN, title, author, genre, publishing, ncopies, availcopies)
VALUES
(978-1477848661, 'Stillhouse Lake', 'Rachel Caine', 'Fiction', 'Thomas & Mercer', July-1-2017, 1, 0),
(978-1524763138, 'Becoming', 'Michelle Obama', 'Biographies', 'Crown Publishing Group', November-13-2018, 2, 2), 
(978-0399255564, 'The Very Hungry Caterpillar', 'Eric Carle', 'Children', 'Philomel Books', October-15-1981, 1, 1);


- Someone has just checked out one of the books. Change the number of available copies to 1 fewer.

UPDATE library SET availcopies=1 WHERE ISBN=978-1524763138 AND title='Becoming';


- Now one of the books has been added to the banned books list. Remove it from the table.

DELETE FROM library WHERE ISBN=978-1477848661 AND title='Stillhouse Lake';



6. Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. In addition to the table creation, provide commands that perform the following operations:

CREATE TABLE spacecrafts (
	id char, 
	name varchar, 
	year tinyint, 
	country varchar, 
	description varchar, 
	body varchar,
	operating bit, 
	distance smallint, 
)


- Add three non-Earth-orbiting satellites to the table.

INSERT INTO spacecraft (id, name, year, country, description, body, operating, distance)
VALUES
(123, 'Telecom', 2019, 'France', 'Telecommunications satellites', 'satellite', 1, 350),
(034, 'Army', 2018, 'USA', 'Defense satellite', 'satellite', null, 500), 
(438, 'Weather', 'UK', 'Weather forecasts satellite', 'satellite', 1, 320);


- Remove one of the satellites from the table since it has just crashed into the planet.

DELETE FROM spacecrafts WHERE id=034 AND name='Army';


- Edit another satellite because it is no longer operating and change the value to reflect that.

UPDATE spacecrafts SET operating='null' WHERE id=438 AND name='Weather';


7. Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. Also provide commands that perform the following operations:

CREATE TABLE email (
	id char, 
	subject varchar, 
	sender varchar, 
	recipients varchar, 
	email varchar, 
	timestamp timestamp, 
	read bit,
	emailchainid char, 
)


- Add three new emails to the inbox.

INSERT INTO email (id, subject, sender, recipients, email, timestamp, read, emailchainid)
(1375, 'Our WE trip', 'Steph', 'Jane', 'Hi Ben, are we still meeting?', 1556058300, 1, 'WE plans'),
(1376, 'Our WE trip', 'Ben', 'Steph', 'Hell yeah, Will is also coming I think', 1556058401, 0, 'WE plans'), 
(1377, 'Our WE trip', 'Will', 'Steph', 'Hi Steph, I am also coming', 1556058483, 0, 'WE plans');

- You deleted one of the emails, so write a command to remove the row from the inbox table.

DELETE FROM email WHERE id=1377;

- You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.

UPDATE email SET read=0 WHERE id=1375 AND name='Steph'; 